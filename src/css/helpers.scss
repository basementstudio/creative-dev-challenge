@use 'sass:string';
@use 'sass:math';

/* stylelint-disable-next-line number-max-precision */
$golden-ratio: 1.6180339887498948482;
$reciprocal-golden-ratio: 1 / $golden-ratio;
$duration: $reciprocal-golden-ratio * 1.2;
$breakpoints: (
  'mobile': (
    max-width: 480px
  ),
  'min-mobile': (
    min-width: 481px
  ),
  'min-tablet': (
    min-width: 769px
  ),
  'tablet': (
    max-width: 768px
  ),
  'min-tablet-lg': (
    min-width: 1025px
  ),
  'tablet-lg': (
    max-width: 1024px
  ),
  'desktop-sm': (
    max-width: 1280px
  ),
  'min-desktop-sm': (
    min-width: 1281px
  ),
  'desktop': (
    max-width: 1440px
  ),
  'desktop-xl': (
    min-width: 1920px
  )
);

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  } @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. ' + 'Available breakpoints are: #{map-keys($breakpoints)}.';
  }
}

@function tovw($target, $min: 'placeholder', $context: 1920px) {
  @if $context == 'desktop-large' {
    $context: 1920px;
  }

  @if $context == 'desktop' {
    $context: 1440px;
  }

  @if $context == 'tablet-lg' {
    $context: 1024px;
  }

  @if $context == 'tablet' {
    $context: 620px;
  }

  @if $context == 'mobile' {
    $context: 375px;
  }

  @if $target == 0 {
    @return 0;
  }

  @if $min != 'placeholder' {
    @return string.unquote(
      'max(' + $min + ', ' + (math.div($target, $context) * 100) + 'vw)'
    );
  }

  @return string.unquote((math.div($target, $context) * 100) + 'vw');
}

@function torem($target, $context: 16px) {
  @if $target == 0 {
    @return 0;
  }

  @return math.div($target, $context) + 0rem;
}

@function toem($target, $context) {
  @if $target == 0 {
    @return 0;
  }

  @return math.div($target, $context) + 0em;
}
